openapi: 3.0.1
info:
  title: Portal Communities API
  version: '10.11'
  description: |
    ## Overview
    Communities in API Portal define the exposure of APIs and packages to consumers. A community
    can have one or more administrators that manage the members of a community. The APIs and
    packages assigned to the public community are exposed to all users including unregistered users.

    ### Private Community
    A private community membership grants API consumers access to private APIs and packages. APIs and
    packages that are associated to a private community are only visible to users that belong to this
    community. Community owners can add users to or remove users from the community.

    ### Public Community
    The public community is a community any registered user can join. Each API Portal instance
    features only one public community. By default, all APIs and packages are assigned to the Public
    Community and they are visible to all users. This is the default community of a userjoining without
    specifying a private community. Public community members and guest users can see the public
    APIs and packages

    ## Functionalities supported
    - Get detail of all the communities
    - Create a new community
    - Get detail of a particular community, delete a community and modify community
    - Get APIS linked with the community
    - Add, delete APIs linked with the community
    - Get Groups linked with the community
    - Add, delete Groups linked with the community
    - Get Users linked with the community
    - Add, delete Users linked with the community
    - Change owner of a community
    - Get Packages linked with the community
    - Add, delete Packages linked with the community
    - Add or remove community administrators

    ## Authorization
    - Any authenticated user can view all the public communites and user's private communities
    - Users with privileges *API Administrator* and/or *API Provider* or *owner of the community* can
      - view the community,
      - view users,groups, apis and packages
      - link/unlink apis
      - link/unlink packages
      if its a private community and no restrictions on these operations if it is a public community
    - Users with privileges *API Administrator* and/or *API Provider* can create a community
    - Users with privilege *API Administrator* or *owner of the community* can update the community(Public/Private) or
      change the owner of the community or add/remove the users or groups in a community
    - Users with privilege *API Administrator* or *owner of the community* can delete the community only
      if it is a private community

servers:
  - url: http://localhost:18101/portal/rest/v1
    description: Development server

paths:
  '/communities':
    get:
      tags:
        - Community
      summary: Retrieve all communities
      description: Retrieves all the available communities accessible to the logged in user in the system'
      parameters:
        - name: page
          in: query
          description: Optional parameter. Defines the page number to be retrieved for the collection. If not specified default value 0 is assumed. By default collection responses are paginated with batches of 10.
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: Optional parameter. Defines the number of results to be fetched for the current page. If not specified default value configured in system settings will be considered.
          required: false
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
    post:
      tags:
        - Community
      summary: Creating a new community
      description: Creating a new community with the given data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
            examples:
              community:
                $ref: '#/components/examples/NewCommunity'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                users-error:
                  $ref: '#/components/examples/Invalid-user'
                groups-error:
                  $ref: '#/components/examples/Invalid-group'
                packages-error:
                  $ref: '#/components/examples/Invalid-package'
                apis-error:
                  $ref: '#/components/examples/Invalid-API'
  '/communities/{id}':
    get:
      tags:
        - Community
      summary: Retrieve a Community
      description: Retrieve a specific Community identified by given GUID
      responses:
        '200':
          description: Response when community identified by given GUID is successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                community:
                  $ref: '#/components/examples/NewCommunity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Community
      summary: Update a Community
      description: Update an existing Community identified by given GUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
            examples:
              community:
                $ref: '#/components/examples/Community'
      responses:
        '200':
          $ref: '#/components/responses/UpdatedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Community
      summary: Delete a community
      description: Delete an existing community identified by given GUID
      responses:
        '204':
          description: The response when the community is successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID of the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  '/communities/{id}/apis':
    get:
      tags:
        - Community
      summary: Get all APIs of a community
      description: Get all APIs associated to a specific community identified by given GUID
      responses:
        '200':
          description: The response when associated APIs are successfully retrieved for a specific community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISearchResponse'
              examples:
                apis:
                  $ref: '#/components/examples/APIs'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Community
      summary: Add list of APIs to a community
      description: Add given list of APIs to a specific community identified by given GUID
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
              - 23b0ce88-3296-36be-b2a1-f470aee3f031
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                community:
                  $ref: '#/components/responses/Community'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Community
      summary: Delete APIs from a community
      description: Delete APIs from a specific community identified by given GUID
      responses:
        '200':
          description: The response when the API is successfully unlinked from given community
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID fo the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  '/communities/{id}/users':
    get:
      tags:
        - Community
      summary: Get all users in a community
      description: Get all users associated to a specific community identified by given GUID
      responses:
        '200':
          description: The response when associated Users are successfully retrieved for a specific community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              examples:
                apis:
                  $ref: '#/components/examples/users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Community
      summary: Add users to a community
      description: Add collection of users to a specific community identified by given GUID
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
              - 23b0ce88-3296-36be-b2a1-f470aee3f031
      responses:
        '200':
          description: Response when the collection of users are succesfully added to the community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                community:
                  $ref: '#/components/examples/Community'
        '400':
          $ref: '#/components/responses/BadRequest-Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Community
      summary: Remove users from a community
      description: Remove collection of users from specific community identified by given GUID
      responses:
        '200':
          description: The response when the users are successfully removed from given community
        '400':
          $ref: '#/components/responses/BadRequest-Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID fo the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  '/communities/{id}/groups':
    get:
      tags:
        - Community
      summary: Get all groups in a community
      description: Get all groups associated with a specific community
      responses:
        '200':
          description: The response when associated groups are successfully retrieved for a specific community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSearchResponse'
              examples:
                apis:
                  $ref: '#/components/examples/groups'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Community
      summary: Add groups to a community
      description: Add collection of groups to a specific community identified by given GUID
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
              - 23b0ce88-3296-36be-b2a1-f470aee3f031
      responses:
        '200':
          description: Response when the collection of groups are successfully added to specific community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                community:
                  $ref: '#/components/examples/Community'
        '400':
          $ref: '#/components/responses/BadRequest-Groups'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Community
      summary: Remove  groups from  community
      description: Remove collection of groups from specific community identified by given GUID
      responses:
        '200':
          description: The response when the groups are succesfully unlinked from the specific community.
        '400':
          $ref: '#/components/responses/BadRequest-Groups'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID fo the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  '/communities/{id}/owner':
    put:
      tags:
        - Community
      summary: Update owner of a community
      description: Update owner of a specific community identified by given GUID
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: GUID referring to the new owner
            example:
              23b0ce88-3296-36be-b2a1-f470aee3f031
      responses:
        '200':
          description: Response when successfully updated the owner of a specific community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                community:
                  $ref: '#/components/examples/Community'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID fo the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  '/communities/{id}/packages':
    get:
      tags:
        - Community
      summary: Retrieves all packages of a community
      description: Retrieves all packages associated to a specific community identified by given GUID
      responses:
        '200':
          description: The response when associated pacakges are successfully retrieved for a specific community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageSearchResponse'
              examples:
                packages:
                  $ref: '#/components/examples/Packages'
    put:
      tags:
        - Community
      summary: Adding packages to a community
      description: Adding collection of packages to a community identified using specific GUID
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
              - 23b0ce88-3296-36be-b2a1-f470aee3f031
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              example:
                $ref: '#/components/examples/Community'
        '400':
          $ref: '#/components/responses/BadRequest-Packages'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Community
      summary: Remove packages from a community
      description: Remove packages from a specific community identified by given GUID
      responses:
        '200':
          description: The response when the packages are succesfully unlinked from the specific community.
        '400':
          $ref: '#/components/responses/BadRequest-Packages'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID fo the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  '/communities/{id}/ispublic':
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID fo the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Community
      summary: Verify if a community is a public community
      description: Verify if a community is a public community by given GUID
      responses:
        '200':
          description: States if the community is a public community
          content:
            application/json:
              schema:
                type: boolean
              example:
                false
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/communities/{id}/administrators':
    get:
      tags:
        - Community
      summary: Get the administrators of a community
      description: Get the administrator details of the given community
      responses:
        '200':
          description: The response when associated administrators are successfully retrieved for a specific community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              examples:
                apis:
                  $ref: '#/components/examples/users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Community
      summary: Add administrators to a community
      description: Add collection of users as administrators to a specific community identified by given GUID
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
              - 23b0ce88-3296-36be-b2a1-f470aee3f031
      responses:
        '200':
          description: Response when the collection of users are succesfully added as administrators to the community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                community:
                  $ref: '#/components/examples/Community'
        '400':
          $ref: '#/components/responses/BadRequest-Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for community. Refers to the GUID fo the community.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid

components:
  securitySchemes:
    accesstoken:
      type: apiKey
      in: cookie
      name: accesstoken
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    SearchResponse:
      description: Paginated collection of communities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchResponse'
          examples:
            communities:
              $ref: '#/components/examples/Communities'

    CreatedResponse:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedResponse'
          examples:
            201:
              $ref: '#/components/examples/CreatedResponse'

    UpdatedResponse:
      description: The response when the community is successfully updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Community'
          examples:
            community:
              $ref: '#/components/examples/Community'

    BadRequest-Packages:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            400:
              $ref: '#/components/examples/Invalid-package'

    BadRequest-Users:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            400:
              $ref: '#/components/examples/Invalid-user'

    BadRequest-Groups:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            400:
              $ref: '#/components/examples/Invalid-group'

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            400:
              $ref: '#/components/examples/Invalid-API'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            401:
              $ref: '#/components/examples/401'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            403:
              $ref: '#/components/examples/403'

    NotFound:
      description: The specified community was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            404:
              $ref: '#/components/examples/404'
    Community:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Community'
          examples:
            Community:
              $ref: '#/components/examples/Community'

  schemas:
    Pagination:
      required:
        - _self
      type: object
      properties:
        _self:
          type: string
          description: Link for current page
        _next:
          type: string
          description: Optional link for the next page. Will be missing if the next page does not exist.

    CreatedResponse:
      required:
        - id
        - _self
      type: object
      properties:
        id:
          type: string
          description: Unique identification for community. Refers to the GUID fo the plan.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        _self:
          type: string
          description: link to the current community created

    SearchResponse:
      required:
        - result
        - count
      type: object
      properties:
        result:
          type: array
          description: Array of objects matching given criteria
          items:
            $ref: '#/components/schemas/Community'
        _links:
          $ref: '#/components/schemas/Pagination'
        count:
          type: integer
          description: total number of results found
          format: int32
    UpdatedResponse:
      type: object
      properties:
        code:
          description: Response code
          type: integer
        message:
          description: Response message
          type: string
    Error:
      type: object
      properties:
        code:
          description: Error code
          type: integer
        message:
          description: Error message
          type: string
    Community:
      type: object
      properties:
        id:
          type: string
          description: Unique identification for community. Refers to the GUID fo the community. For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
        name:
          type: string
          description: Name of the Community
        owner:
          type: string
          description: GUID of the user who owns of the Community
        description:
          type: string
          description: Description of the Community
        apis:
          type: array
          description: GUID of the API's associated with the community
          items:
            type: string
        groups:
          type: array
          description: GUID of the groups associated with the community
          items:
            type: string
        users:
          type: array
          description: GUID of the users associated with the community
          items:
            type: string
        packages:
          type: array
          description: GUID of packages associated with the community
          items:
            type: string
        administrators:
          type: array
          description: GUID of community administrator users
          items:
            type: string
    SearchResponseSummary:
      type: object
      required:
        - result
        - count
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Summary'
        count:
          type: integer
        _links:
          type: object
          required:
            - _self
          properties:
            _self:
              type: string
            _next:
              type: string
    Summary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        summary:
          type: string
    PackageSearchResponse:
      required:
        - result
        - count
      type: object
      properties:
        result:
          type: array
          description: Array of objects matching given criteria
          items:
            $ref: '#/components/schemas/PackageSummary'
        _links:
          $ref: '#/components/schemas/Pagination'
        count:
          type: integer
          description: total number of results found
          format: int32
    APISearchResponse:
      required:
        - result
        - count
      type: object
      properties:
        result:
          type: array
          description: Collection of APIs
          items:
            $ref: '#/components/schemas/APISummary'
        _links:
          $ref: '#/components/schemas/Pagination'
        count:
          type: integer
          description: total number of results found
          format: int32
    PackageSummary:
      type: object
      properties:
        id:
          description: Unique identification for Package. Refers to the GUID fo the Package. For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
          type: string
          format: uuid
        name:
          type: string
          description: Name of the API
        summary:
          type: string
          description: Summary description for the API
        icon:
          $ref: '#/components/schemas/Icon'
        externalRefKey:
          type: string
          description: external reference key. Refers to the GUID of the API in the external system like Gateway.
    APISummary:
      type: object
      properties:
        id:
          description: Unique identification for API. Refers to the GUID fo the API. For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
          type: string
          format: uuid
        name:
          type: string
          description: Name of the API
        summary:
          type: string
          description: Summary description for the API
        icon:
          $ref: '#/components/schemas/Icon'
        version:
          type: string
          description: Version number of the API
        type:
          type: string
          description: Type of the API. Indicating REST/SOAP/OData
        externalRefKey:
          type: string
          description: external reference key. Refers to the GUID of the API in the external system like Gateway.
    Icon:
      type: object
      properties:
        url:
          type: string
          description: uri location for the icon
        type:
          type: string
          description: type of uri location. refers to either Internal/External. When points to Internal uri is hosted by the API Portal

    GroupSearchResponse:
      required:
        - result
        - count
      type: object
      properties:
        result:
          type: array
          description: Array of objects matching given criteria
          items:
            $ref: '#/components/schemas/Group'
        _links:
          $ref: '#/components/schemas/Pagination'
        count:
          type: integer
          description: total number of results found
          format: int32
    Group:
      type: object
      properties:
        id:
          description: Unique identification for group. Refers to the GUID for the group. For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
          type: string
          format: uuid
        created:
          description: date in which the group is provisioned in the system.
          type: string
        modified:
          description: date in which the group was modified in the system.
          type: string
        name:
          description: name of the group
          type: string
        displayName:
          description: display name of the group.
          type: string
    Users:
      type: array
      description: Collection of users
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        username:
          description: username of the user
          type: string
        id:
          description: Unique identification for user. Refers to the GUID for the user. For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
          type: string
          format: uuid
        firstname:
          description: First name of the user
          type: string
        lastname:
          description: Last name of the user
          type: string
        locale:
          description: Preferred locale of the user
          type: string
        externalPictureUrl:
          description: External picture url for the user
          type: string
        type:
          description: field indicating type of user like LDAP/Social/Native user
          type: string
        created:
          description: date in which the user is provisioned in the system.
          type: string
        modified:
          description: date in which the user was modified in the system.
          type: string
        name:
          description: username of the user
          type: string
        displayName:
          description: display name of the user. usually derived from first / last name of the user
          type: string
  examples:
    CreatedResponse:
      value:
        id: f790526b-4de4-c305-732d-d8a3d3e2bc12
        _self: /rest/v1/communities/f790526b-4de4-c305-732d-d8a3d3e2bc12

    Communities:
      value:
        result:
          - name: Public Community
            id: 3bdf8005-5685-3ef5-b132-de4681963fb6
            description: Public Community
        count: 1
        _links:
          _self: "/rest/v1/communities?page=0"

    UpdatedResponse:
      value:
        code: 200
        message: Community is updated successfully

    Invalid-API:
      value:
        code: 400
        message: User provided data is not correct
        errors:
          - 'Unable to find the API with id [47b53f39-5f40-4a57-ad-3666f3b8e799]'
    Invalid-package:
      value:
        code: 400
        message: User provided data is not correct
        errors:
          - 'Unable to find the packages with id [47b53f39-5f40-4a57-ad-3666f3b8e799]'
    Invalid-user:
      value:
        code: 400
        message: User provided data is not correct
        errors:
          - 'Unable to find the users with id [47b53f39-5f40-4a57-ad-3666f3b8e799]'
    Invalid-group:
      value:
        code: 400
        message: User provided data is not correct
        errors:
          - 'Unable to find the Groups with id [47b53f39-5f40-4a57-ad-3666f3b8e799]'
    APIs:
      value:
        result:
          - id: a1264eff-87f9-4e6d-b4b8-abf51855afda
            name: pet1
            summary: 'This is a sample server Petstore server. '
            icon:
              url: "/public/assets/images/rest-api-icon.svg"
              type: INTERNAL
            version: 1.0.5
            type: REST
            externalRefKey: 7f4adf29-3beb-45ef-8c1a-345a8eada6f3
        count: 1
        _links:
          _self: "/rest/v1/communities/3bdf8005-5685-3ef5-b132-de4681963fb6/apis?page=0"
    Packages:
      value:
        result:
          - id: a1264eff-87f9-4e6d-b4b8-abf51855afda
            name: TravelPackage
            summary: 'This is a travel package which includes the APIs related to travel '
            icon:
              url: "/rest/v1/files/9ab59a45-05bb-4781-ace1-bb41675ba867"
              type: INTERNAL
            externalRefKey: 7f4adf29-3beb-45ef-8c1a-345a8eada6f3
        count: 1
        _links:
          _self: "/rest/v1/communities/3bdf8005-5685-3ef5-b132-de4681963fb6/packages?page=0"
    401:
      value:
        code: 401
        message: "Invalid credentials"
    403:
      value:
        code: 403
        message: "Insufficient privileges"
    404:
      value:
        code: 404
        message: "Unable to find the Community with id [c234ec5e-8e8d-4e2d-84f1-526b590bfd37]"
    NewCommunity:
      value:
        name: HealthCareCommunity
        description: This community created for healthcare department users.
        apis:
          - 80b2c6d2-30e5-4b2f-82ce-07f9205941cb
          - ebf986ac-cb6c-405b-b047-67202706c42e
        groups:
          - 568ecf56-5fdc-4d2a-a3f7-64a6d824a21d
        users:
          - 52c0b766-8bdc-4932-93f2-c7bcb8a16750
          - 6b8e787f-142d-4675-901d-21999b8dc6e2
        packages:
          - 23b0ce88-3296-36be-b2a1-f470aee3f031
    users:
      value:
        - username: user1
          id: 24c9e15e-52af-347c-a25b-757e7bee1f9d
          firstname: Harry
          lastname: Williams
          locale: en_US
          externalPictureUrl: "/rest/v1/users/24c9e15e-52af-347c-a25b-757e7bee1f9d/picture"
          type: NATIVE
          created: 2021-03-25 12:54
          modified: 2021-03-25 12:54
          name: HaryW
          displayName: Harry Williams
    groups:
      value:
        result:
          - id: da7c1b25-1941-3d31-a411-f058c3c72e86
            name: Sales
            created: 2021-03-25 13:41
            modified: 2021-03-25 13:41
            displayName: Sales
        count: 1
        _links:
          _self: "/rest/v1/communities/0c0fc574-6f3c-4e0f-842b-8969ba044f64/groups?page=0"
    Community:
      value:
        id: 64e1fbe8-bfce-43a5-b728-5e89c1c8d953
        name: HealthCareCommunity
        description: This community created for healthcare department users.
        apis:
          - 80b2c6d2-30e5-4b2f-82ce-07f9205941cb
          - ebf986ac-cb6c-405b-b047-67202706c42e
        groups:
          - 568ecf56-5fdc-4d2a-a3f7-64a6d824a21d
        users:
          - 52c0b766-8bdc-4932-93f2-c7bcb8a16750
          - 6b8e787f-142d-4675-901d-21999b8dc6e2
        packages:
          - 23b0ce88-3296-36be-b2a1-f470aee3f031
        administrators:
          - 516fbb8a-402a-4e69-ac31-7d50a4997af2
