openapi: 3.0.1
info:
  title: Portal Users API
  description: |
    ## Overview
    API Portal User Management Service allows you to manage Users, Groups in the API Portal.

    Any user with the **API Administrator** functional privilege can manage the Users, Groups in API Portal.

    By default, the users who are part of **API Administrator** groups will have this privilege.

    ## Functionalities supported

    ### Managing users
    User with **API Administrator** functional privilege can manage list of user accounts in the API Portal. This includes
    1) retrieving the users by their unique identifer
    2) creating brand new users with specific functional privilege
    3) updating the users basic attributes and assigning them the required functional privilege
    4) deleteing the stale / unwanted users.

    ### Managing groups
    User with **API Administrator** functional privilege can manage list of user groups in the API Portal. This includes
    1) retrieving the groups by their unique identifer
    2) creating new user groups with specific functional privilege and assign a collection of users
    3) updating the groups basic attributes and assigning them the required functional privilege
    4) deleteing the stale / unwanted groups.

    ### My profile
    API Portal allows you to manage your own profile account using this API. As a registered user in API Portal user can manage his own profile information which includes the profile picture, firstname, last name, phone numbers, preferrer locale etc.

    You can only update your own profile info including the passwords. Changing the password in profile, will require to re-confirm his identity again.

    Profile info is **read only** for LDAP/ Social users, since the actual source of truth for those users are maintained in respective source systems.

    ## Authorization
    - User with **API Administrator** functional privilege can manage users and groups.
    - All users can manage their own profile details.

  version: '10.11'

servers:
  - url: http://localhost:18101/portal/rest/v1
    description: Development server

paths:
  /csrf:
    get:
      description: |-
        Retrieve the csrf token for a session. Value will be set as cookie

        *This is an **ANONYMOUS** endpoint; No authorization required*
      summary: Get CSRF token
      responses:
        '200' :
          description: The xsrf-token will be sent as part of cookie
  /login:
    post:
      description: |-
        Login to Portal with a valid user name and password. This API supports only `NATIVE` / `LDAP` users login only.

        *This is an **ANONYMOUS** endpoint; No authorization required*

        *The CSRF Token is mandatory. Get the token via /csrf and send the value in header xsrf-token*
      summary: Login API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              LoginRequest:
                $ref: '#/components/examples/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginSuccess'
        '400':
          $ref: '#/components/responses/LoginFailure'
        '403':
          description: Invalid CSRF token
  /forgotpassword:
    post:
      description: |
        To recover the forgotten password via registered email. User will be sent a link via email to recover his/her password.

        *This is an **ANONYMOUS** endpoint; No authorization required*

      summary : Recover password
      parameters:
        - in: query
          name: userName
          schema:
            type: string
          description: unique username of the user for whom we need to recover the password
      responses:
        '200':
          description: 'Response when we successfully executed the recover password flow'
  /resetpassword:
    post:
      description: |
        To reset the password of the APIPortal user. After succesfully password reset user will get a intimation mail.

        *This is an **ANONYMOUS** endpoint; No authorization required*
      summary: Reset password using recovery link
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string

      responses:
        '200':
          description: ''

  /passwordpolicy:
    get:
      description: |
        Retrieve the configured password policy in the system. Password policies defines the number of uppercase / lowercase / specical character to be used for a secure password for each regisered user.

        *This is an **ANONYMOUS** endpoint; No authorization required*
      summary: Retrieve password policy
      responses:
        '200':
          description: 'Password policy configuration'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
              examples:
                passwordpolicy:
                  $ref: '#/components/examples/PasswordPolicy'
  /signup:
    post:
      description: |
        Register a new user information with API Portal. The fields required for signup form is customizable with self service customization.

        *This is an **ANONYMOUS** endpoint; No authorization required*
      summary: Register new user
      tags:
        - signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              signup:
                $ref: '#/components/examples/Signup'
      responses:
        '200':
          description: 'Response when the user information is successfully registered in the system'
        '400':
          $ref: '#/components/responses/SignupFailure'
  /users/updatepassword:
    put:
      description: |
        Updating password of current user.

        Any registered user in API Portal can use this method to update his current password.

        *Endpoint can be accessed by **all** users of type **NATIVE**.   **LDAP**/**SOCIAL** users passwords **can not** be updated here.*
      summary: Change password
      tags:
        - MyProfile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
            example: |
              ------WebKitFormBoundaryjtODoCFCAO2kmPcI
              Content-Disposition: form-data; name="oldPassword"

              manage
              ------WebKitFormBoundaryjtODoCFCAO2kmPcI
              Content-Disposition: form-data; name="newPassword"

              Test@123
              ------WebKitFormBoundaryjtODoCFCAO2kmPcI--
      responses:
        '200':
          description: 'Response when successfully updated the logged in user password'
        '400':
          $ref: '#/components/responses/UpdatePasswordFailure'
  /users/updateemail:
    put:
      description: |
        Updating email address of current user.

        Any registered user in API Portal can use this method to update his current password.

        *Endpoint can be accessed by **all** users of type **NATIVE**.*
      summary: Update email address
      tags:
        - MyProfile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateEmail'
            example: |
              ------WebKitFormBoundaryV3OkkCA5GCpszswD
              Content-Disposition: form-data; name="password"

              manage
              ------WebKitFormBoundaryV3OkkCA5GCpszswD
              Content-Disposition: form-data; name="email"

              abc@xyz.com
              ------WebKitFormBoundaryV3OkkCA5GCpszswD--
      responses:
        '200':
          description: 'Response when successfully updated the logged in user email address'
        '400':
          $ref: '#/components/responses/PasswordDoNotMatch'
  /users/updatepicture:
    put:
      description: |
        Updating profile picture of current user.

        Any registered user in API Portal can use this method to update his current profile pic.

        *Endpoint can be accessed by **all** users of type **NATIVE**.*
      summary: Update profile picture
      tags:
        - MyProfile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: object
                  description: profile picture to be uploaded.
            example: |
              ------WebKitFormBoundaryWh7YIEN5mdUWFbkh
              Content-Disposition: form-data; name="file"; filename="Johnson.jpg"
              Content-Type: image/jpeg


              ------WebKitFormBoundaryWh7YIEN5mdUWFbkh--
      responses:
        '200':
          description: 'Response when successfully updated the logged in user profile picture'
        '400':
          $ref: '#/components/responses/InvalidProfilePicture'
  /users:
    get:
      summary: Retrieve available users
      description: Retrieves available users in the system for the specified page number
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Optional parameter. Defines the page number to be retrieved for the collection. If not specified default value 0 is assumed. By default collection responses are paginated with batches of 10.
          required: false
          schema:
            type: integer

        - name: limit
          in: query
          description: Optional parameter. Defines the number of results to be fetched for the current page. If not specified default value configured in system settings will be considered.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Response when succesfully fetch the users available in the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
              examples:
                Users:
                  $ref: '#/components/examples/Users'
    post:
      description: |
        Create new user in API Portal by filling in basic information like firstname, lastname, email

        *Endpoint can be accessed only by users with **API-Administrator** functional privilege*

      summary: Create a new user in API Portal.
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              User:
                $ref: '#/components/examples/User'
      responses:
        '201':
          $ref: '#/components/responses/CreateUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/self:
    get:
      description: |
        Retrieve the details about currently logged in user.

        *Endpoint can be accessed by **ALL** registered users*

      summary: Retrieve logged in user details
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/SelfResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    parameters: []
  /users/self/privileges:
    get:
      summary: Retrieves the privileges of loggedin user
      description: |
        Fetch the currently logged in user privileges.

        *Endpoint can be accessed by **ALL** registered users*
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/SelfPrivilegesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/{id}:
    get:
      summary: Retrieve specific user identified given UUID
      description: Retrieve specific user detail by using the unique identifier(uuid).
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/UserById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update user
      description: |
        Update user basic information like `firstname` , `lastname`, `email` for specific user identified given UUID

        *Endpoint can be accessed only by a user having permission to **UPDATE** user*
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              User:
                $ref: '#/components/examples/User'
      responses:
        '200':
          $ref: '#/components/responses/UserById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete user
      description: |
        Delete specific user identified by given unique identifier(UUID)

        *Endpoint can be accessed only by users with **API-Administrator** functional privilege*
      tags:
        - Users
      responses:
        '204':
          description: Response when succesfuly removed the user.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - name: id
        in: path
        description: Unique identification for user. Refers to the UUID of the user.
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  /users/delete:
    post:
      summary: Delete my account
      description: |
        Deleting the logged in user account. User must provide his current password to re-confirm his identity.

        *Endpoint can be accessed by **ALL** registered users*
      tags:
        - Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: logged in user password.
            example:
              password: manage
      responses:
        '204':
          description: Response when succesfully deleted the user account.
        400:
          $ref: '#/components/responses/PasswordDoNotMatch'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/anonymize:
    put:
      summary: Anonymize the users that are already deleted in Developer Portal
      description: |
        To accomplish GDPR compliance, after deleting the user from developer portal their personal details has to be anonymized in the application.
        This endpoint can be used to anonymize the users' personal data manually.

        *Endpoint can be accessed only by users with **API Administrator** functional privilege*

      tags:
        - Users

      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: Collection of user names (login name)
              items:
                type: string
            example: [ "ProviderUser1","ConsumerUser3" ]

      responses:
        '200':
          $ref: '#/components/responses/UpdatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /groups/{id}/users:
    put:
      summary: Add users to group
      description: |
        Add collection of users as members of the specific group identified given UUID

        *Endpoint can be accessed only by users with **API-Administrator** functional privilege*
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: Collection of uuids
              items:
                type: string
            example: ["90015098-3cd2-3fb0-9696-3f7d28e17f72"]
      responses:
        '200':
          description: Adding Users to Group Successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove users from group
      description: |
        Remove users identified by the collection of unique identifiers(uuid) from the given APIPortal user group

        *Endpoint can be accessed only by users with **API-Administrator** functional privilege*
      tags:
        - Groups
      responses:
        '200':
          description: Removal of users from group Successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/GroupNotFound'
    get:
      summary:  Fetch members of user group
      description: |
        Retrieve the users  associated toa specific group identified by given UUID

        *Endpoint can be accessed by users with **API-Administrator** or **API-Provider** functional privilege*
      tags:
        - Groups
      responses:
        '200':
          description: Response when succesfully retrieved all users in a group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                Users:
                  $ref: '#/components/examples/UserList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/GroupNotFound'
    parameters:
      - name: id
        in: path
        description: Unique Identification for a group
        required: true
        allowEmptyValue: false
        schema:
          type: string
          format: uuid
  /groups:
    get:
      description: |
        Retrieves paginated collection of user groups available in the system

        *Endpoint can be accessed by **ALL** registered users*
      summary: Fetch groups
      tags:
        - Groups
      responses:
        '200':
          description: Response when succesfully retrieved the groups in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups'
              examples:
                Users:
                  $ref: '#/components/examples/Groups'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      description: |
        Create a group with its basic details

        *Endpoint can be accessed only by users with **API-Administrator** functional privilege*
      summary: Fetch groups
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              $ref: '#/components/examples/Group'
      responses:
        '201':
          description: Response when the group is successfully created the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /groups/{id}:
    get:
      summary: Retrieve group
      description: |
        Retrieve a specific group identified by given unique identifier(UUID)

        *Endpoint can be accessed by **ALL** registered users*
      tags:
        - Groups
      responses:
        '200':
          description: Response when succesfully retrieved the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              examples:
                Groups:
                  $ref: '#/components/examples/Group'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      summary: Update user group
      description: |
        Update a specific group identified by given unique identifier(UUID)

        *Endpoint can be accessed only by users with **API-Administrator** functional privilege*
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              $ref: '#/components/examples/Group'
      responses:
        '200':
          description: Response when the group is succesfully updated in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              example:
                $ref: '#/components/examples/Group'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/GroupNotFound'
    delete:
      summary: Delete group
      description: |
        Delete a specific group identified by given unique identifier(uuid)

        *Endpoint can be accessed only by users with **API-Administrator** functional privilege*
      tags:
        - Groups
      responses:
        '204':
          description: Response when group is succesfully removed.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/GroupNotFound'
    parameters:
      - name: id
        in: path
        description: Unique Identification of a group
        required: true
        allowEmptyValue: false
        schema:
          type: string

components:

  schemas:
    UpdateEmail:
      type: object
      properties:
        password:
          type: string
          description: existing password for the logged in user
        email:
          type: string
          description: new email address to be updated.

    UpdatedResponse:
      type: object
      properties:
        code:
          description: Response code
          type: integer
        message:
          description: Response message
          type: string

    UpdatePassword:
      type: object
      properties:
        oldPassword:
          type: string
          description: existing password for the logged in user
        newPassword:
          type: string
          description: new password to be updated. Password must comply to `password policy` configured.

    Configuration:
      type: object
      properties:
        category:
          type: string
          description: category of the configuration object.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationEntry'

    ConfigurationEntry:
      type: object
      properties:
        value:
          type: string
          description: actual value
        key:
          type: string
          description: specific key to be updated

    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: detailed error message if any.

    LoginRequest:
      type: object
      description: Login request
      properties:
        username:
          description: Login user name
          type: string
        password:
          type: string
          description: Login user password
        otp:
          type: string
          description: One time password for the user. Required if `multi factor authentication` is enabled.

    LoginResponse:
      type: object
      description: Login response
      properties:
        user:
          $ref: '#/components/schemas/User'
        result:
          type: string
          description: status of the login request. It could be `LOGIN_SUCCESSFUL` or `MFA_REQUIRED` or `PASSWORD_EXPIRED`

    User:
      description: User information
      type: object
      properties:
        username:
          description: username of the user
          type: string
        displayname:
          description: dervied name for the user. Usually in the combiation of `first name` + `last name`
          type: string
        firstname:
          description: first name of the user
          type: string
        lastname:
          description: last name of the user
          type: string
        email:
          description: email of the user
          type: string
        type:
          description: type of the user. It could be `NATIVE` / `LDAP` / `SOCIAL`
          type: string
        created:
          description: date in which user was provisioned in the system
          type: string
        modified:
          description: date in which user was modified in the system
          type: string
        id:
          description: uuid of the user.
          type: string
          format: uuid
        attributes:
          description: additional attributes of the user
          type: object

    UsersList:
      type: array
      description: Collection of users
      items:
        $ref: '#/components/schemas/User'

    Users:
      type: object
      properties:
        result:
          type: array
          description: Collection of users
          items:
            $ref: '#/components/schemas/User'
        count:
          type: integer
          description: Total number of users available
        _links:
          type: object
          properties:
            _self:
              description: Link for current page
              type: string
            _next:
              description: Optional link for the next page. Will be missing if the next page does not exist.
              type: string

    Groups:
      type: object
      properties:
        result:
          type: array
          description: Collection of groups
          items:
            $ref: '#/components/schemas/Group'
        count:
          type: integer
          description: Total number of groups available
        _links:
          type: object
          properties:
            _self:
              description: Link for current page
              type: string
            _next:
              description: Optional link for the next page. Will be missing if the next page does not exist.
              type: string

    Group:
      type: object
      properties:
        name:
          description: name of the group
          type: string
        description:
          description: description of the group
          type: string
        created:
          description: date in which group was provisioned in the system
          type: string
        modified:
          description: date in which group was modified in the system
          type: string
        id:
          description: uuid of the user.
          type: string
          format: uuid

    CreationResponse:
      type: object
      properties:
        id:
          description: uuid of the created object
          type: string
        _self:
          description: link for retrieving the created obejct
          type: string
      required:
        - id
        - _self

  responses:
    SelfPrivilegesResponse:
      description: Response when successfully retrieved the logged in user privileges
      content:
        application/json:
          schema:
            description: Collectin of privileges. Privileges are `ROLE_CONSUMER` / `ROLE_ADMINISTRATOR` / `ROLE_PROVIDER`
            type: array
            items:
              type: string
              enum:
                - ROLE_CONSUMER
                - ROLE_ADMINISTRATOR
                - ROLE_PROVIDER
          example:
            ["ROLE_ADMINISTRATOR"]
    SelfResponse:
      description: Response when succesfully retrieved the logged in user details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            User:
              $ref: '#/components/examples/User'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            404:
              $ref: '#/components/examples/404'
    GroupNotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            404:
              $ref: '#/components/examples/404-Group'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            403:
              $ref: '#/components/examples/403'

    CreateUser:
      description: Response when successfully created a new user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreationResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            401:
              $ref: '#/components/examples/401'
    LoginSuccess:
      description: 'Response when the user is successfully authenticated'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'
          examples:
            loginResponse:
              $ref: '#/components/examples/LoginResponse'

    LoginFailure:
      description: 'The request was unacceptable, due to incorrect provided information'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Incorrect user name or password.

    SignupFailure:
      description: 'The request was unacceptable, due to incorrect provided information'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 19
            message: The password does not comply with the conventions.

    InvalidProfilePicture:
      description: 'The request was unacceptable, due to incorrect provided information'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Not a supported Mime type


    PasswordDoNotMatch:
      description: 'Invalid request. User provided information is not correct'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 11
            message: The password does not match the password stored in the database.

    UpdatePasswordFailure:
      description: 'Invalid request. User provided information is not correct'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 19
            message: The password does not comply with the conventions.

    BadRequest:
      description: 'The request was unacceptable, due to invalid payload'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            400:
              $ref: '#/components/examples/400'

    UserById:
      description: Response when succesfully retrieved the user by given UUID.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            User:
              $ref: '#/components/examples/User'

    UpdatedResponse:
      description: The response when the users are anonymized successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatedResponse'
          examples:
            UpdationResponse:
              $ref: '#/components/examples/UpdatedResponse'

  examples:
    PasswordPolicy:
      value:
        - category: PASSWORD_POLICY
          properties:
            - key: PWD_UPPERCASE_ALLOWED
              value: 'true'
            - key: PWD_RESET_CONFIRMATION_ACTIVE
              value: 'true'
            - key: PWD_LOWERCASE_MIN
              value: '0'
            - key: PWD_SPECIAL_SET
              value: '*$-+?_&=!%{}/'
            - key: PWD_RESET_CONFIRMATION_TTL
              value: '30'
            - key: PWD_SPECIAL_ALLOWED
              value: 'true'
            - key: PWD_LENGTH_MIN
              value: '3'
            - key: PWD_CHANGE_FORCE_DIFFERENCE
              value: 'false'
            - key: PWD_NUMERIC_MIN
              value: '1'
            - key: PWD_CHANGE_FORCE_ON_FIRST_LOGIN
              value: 'false'
            - key: PWD_UPPERCASE_MIN
              value: '1'
            - key: PWD_NUMERIC_ALLOWED
              value: 'true'
            - key: PWD_SPECIAL_MIN
              value: '1'
            - key: PWD_LENGTH_MAX
              value: '40'
            - key: PWD_EXPIRY_DAYS
              value: '30'
            - key: PWD_EXPIRY_ACTIVE
              value: 'false'
            - key: PWD_CHANGE_FORCE_AFTER_RESET
              value: 'false'
    LoginRequest:
      value:
        username: Administrator
        password: manage

    400:
      value:
        code: 400
        message: User provided data is not correct

    401:
      value:
        code: 401
        message: "Invalid credentials"

    403:
      value:
        code: 403
        message: "Insufficient privileges"

    404:
      value:
        code: 404
        message: Unable to find the user with id [3bdf8005-5685-3ef5-b132-de4681963fb6]
    404-Group:
      value:
        code: 404
        message: Unable to find the group with id [3bdf8005-5685-3ef5-b132-de4681963fb6]

    LoginResponse:
      value:
        user:
          username: administrator
          id: 200ceb26-807d-3bf9-9fd6-f4f0d1ca54d4
          firstname: Administrator
          lastname: System
          locale: en_US
          type: NATIVE
          created: 2021-03-24 08:15
          modified: 2021-03-24 08:15
          name: administrator
          displayName: Administrator System
        result: LOGIN_SUCCESSFUL

    UserList:
      value:
        - username: administrator
          id: 200ceb26-807d-3bf9-9fd6-f4f0d1ca54d4
          firstname: Administrator
          lastname: System
          locale: en_US
          externalPictureUrl: "/rest/v1/users/200ceb26-807d-3bf9-9fd6-f4f0d1ca54d4/picture"
          type: NATIVE
          created: 2021-03-24 08:15
          modified: 2021-03-24 08:15
          name: administrator
          displayName: Administrator System

    Users:
      value:
        result:
          - username: administrator
            id: 200ceb26-807d-3bf9-9fd6-f4f0d1ca54d4
            firstname: Administrator
            lastname: System
            locale: en_US
            externalPictureUrl: "/rest/v1/users/200ceb26-807d-3bf9-9fd6-f4f0d1ca54d4/picture"
            type: NATIVE
            created: 2021-03-24 08:15
            modified: 2021-03-24 08:15
            name: administrator
            displayName: Administrator System
        count: 1
        _links:
          _self: "/rest/v1/users?page=0"
    Group:
      value:
        id: 7a26cf6e-bfc8-4f5e-a383-25fa49a1bfcb
        name: APIPortal GroupOne
        description: Description of APIPortal GroupOne
    Groups:
      value:
        result:
          - id: 9870271b-5413-3053-b5b3-12f97a513552
            name: API Administrator
            description: Group of API Administrators
            created: 2021-03-24 08:15
            modified: 2021-03-24 08:15
            displayName: API Administrator
          - id: 7dead6ba-d7f3-321d-a5c9-971dc33b73fd
            name: API Consumer
            description: Group of API Consumer
            created: 2021-03-24 08:15
            modified: 2021-03-24 08:15
            displayName: API Consumer
          - id: 8ad53d34-550a-35f8-ac0b-c540aa751dbf
            name: API Provider
            description: Group of API Provider
            created: 2021-03-24 08:15
            modified: 2021-03-24 08:15
            displayName: API Provider
        count: 3
        _links:
          _self: "/rest/v1/groups?page=0"

    Followstreams:
      value:
        apis:
          - id: 5adaed5e-befe-4954-b988-2853f63550f6
            name: Swagger Petstore
            url: /rest/v1/files/9aff2687-a6b6-4bf4-960c-5f25ff767a8c
            version: 1.0.0
            type: REST
            externalRefKey: fcff54b2-8546-4cf2-a148-567c1937a5f7
        packages:
          - id: edf3ae6c-f1e4-4429-909e-7afa349bf4e7
            name: SoftwareAG APIPortal
            summary: This is the summary of Package

    Signup:
      value:
        email: demouser@softwareag.com
        password: demo@1234
    User:
      value:
        firstname: John
        lastname: Williams
        username: Williams
        email: john@xyz.com

    UpdatedResponse:
      value:
        code: 200
        message: Users are anonymized successfully
