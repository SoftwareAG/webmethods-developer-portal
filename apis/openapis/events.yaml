openapi: 3.0.1
info:
  title: Portal Events API
  description: |-
    ## Overview
    The purpose of this API is to view the audit events which will record the lifecycle of an API, Application, Packages, Plans, Community, Provider, Topic, Comment and monitor the subscriptions per package, access token requests per API, API Portal system usage etc.

    A user can use this API, to have a holisitic view of following events that are audited in the system.

    ## Authorization
    - Getting all the events can be done only by a user having *API Administrator* privilege

    ---
    ## API Level
      - API_PUBLISH_EVENT
        - When an API is published from provider to API Portal then API_PUBLISH_EVENT will be recorded for an audit purpose. This event will hold the information of an API and the source.

      - API_REPUBLISH_EVENT
        - When an API is re-published from provider to API Portal then API_REPUBLISH_EVENT will be recorded for an audit purpose. This event will hold the information of an API and the source.

    - API_UN_PUBLISH_EVENT
        - When an API is un-pblished from provider to API Portal then API_UN_PUBLISH_EVENT will be recorded for an audit purpose. This event will hold the information of an API and the source.

    - API_TRY_EVENT
      - When an API is tested using the API Portal try functionality then API_TRY_EVENT will be recorded for an audit purpose. This event will hold the request and response headers, body, status, user information, time taken and API information.
    ---
    ## Application Level
      - GATEWAY_APPLICATION_CREATION_REQUEST_EVENT
        - When an Application is created in API Portal or requested from provider then GATEWAY_APPLICATION_CREATION_REQUEST_EVENT will be recorded for an audit purpose. This event will hold the application information, user requested, provider information and status of an application.

      - GATEWAY_APPLICATION_SCOPE_INCREASE_REQUEST_EVENT
        - When an API is additionaly added to the application scope then GATEWAY_APPLICATION_SCOPE_INCREASE_REQUEST_EVENT will be recorded for an audit purpose.

      - GATEWAY_APPLICATION_SCOPE_DECREASE_REQUEST_EVENT
        - When an API is removed from the application scope then GATEWAY_APPLICATION_SCOPE_DECREASE_REQUEST_EVENT will be recorded for an audit purpose.

      - GATEWAY_APPLICATION_UPDATION_REQUEST_EVENT
        - When there is an update in application metadata then GATEWAY_APPLICATION_UPDATION_REQUEST_EVENT will be recorded for an audit purpose.

      - APPLICATION_REQUEST_PENDING_EVENT
        - When a new application is requested but an approval workflow is in place then APPLICATION_REQUEST_PENDING_EVENT will be recorded for an audit purpose.

      - APPLICATION_REQUEST_APPROVED_EVENT
        - When a new application is requested by a user and it is approved as per the approval workflow configuration then APPLICATION_REQUEST_APPROVED_EVENT will be recorded for an audit purpose.

      - APPLICATION_REQUEST_REJECTED_EVENT
        - When a new application is requested by a user and it is rejected by a user in approval workflow configuration then APPLICATION_REQUEST_REJECTED_EVENT will be recorded for an audit purpose.

      - APPLICATION_GRANTED_EVENT
        - When an owner of an application share this application to another memeber of the team then APPLICATION_GRANTED_EVENT will be recorded for an audit purpose.

      - APPLICATION_REVOKED_EVENT
        - When an owner of an application revokes the access of this application from another user in the team then APPLICATION_REVOKED_EVENT will be recorded for an audit purpose.

      - APPLICATION_PUBLISH_EVENT
        - When an application is created and moved to live status then APPLICATION_PUBLISH_EVENT will be recorded for an audit purpose.

      - APPLICATION_UNPUBLISH_EVENT
        - When an application is deleted then APPLICATION_UNPUBLISH_EVENT will be recorded for an audit purpose.

      - APPLICATION_SCOPE_CHANGE_EVENT
        - When any parameter in an application is updated then APPLICATION_SCOPE_CHANGE_EVENT will be recorded for an audit purpose.
    ---
    ## Community Level
      - COMMUNITY_CREATION_EVENT
        - When an new community is created then COMMUNITY_CREATION_EVENT will be recorded for an audit purpose.

      - COMMUNITY_DELETION_EVENT
        - When an community is deleted then COMMUNITY_DELETION_EVENT will be recorded for an audit purpose.

      - COMMUNITY_MEMBERSHIP_CHANGE_EVENT
        - When an community user or group is updated then COMMUNITY_MEMBERSHIP_CHANGE_EVENT will be recorded for an audit purpose. This event will hold the changed made information

      - COMMUNITY_SCOPE_CHANGE_EVENT
        - When any parameter in an community is updated then COMMUNITY_SCOPE_CHANGE_EVENT will be recorded for an audit purpose.
    ---
    ## Provider Level
      - PROVIDER_PUBLISH_EVENT
        - When an provider is registered to API Portal then PROVIDER_PUBLISH_EVENT will be recorded for an audit purpose.

      - PROVIDER_REPUBLISH_EVENT
        - When an provider re-register itself to an API Portal then PROVIDER_REPUBLISH_EVENT will be recorded for an audit purpose.

      - PROVIDER_UNPUBLISH_EVENT
        - When an provider is deleted from an API Portal then PROVIDER_UNPUBLISH_EVENT will be recorded for an audit purpose.
    ---
    ## Package Level
      - PACKAGE_PUBLISH_EVENT
        - When an package is published from an provider to an API Portal then PACKAGE_PUBLISH_EVENT will be recorded for an audit purpose.

      - PACKAGE_REPUBLISH_EVENT
        - When an package is republished from an provider to an API Portal then PACKAGE_REPUBLISH_EVENT will be recorded for an audit purpose.

      - PACKAGE_UNPUBLISH_EVENT
        - When an package is unpublished from an provider or deleted from an API Portal then PACKAGE_UNPUBLISH_EVENT will be recorded for an audit purpose.
    ---
    ## Plan Level
      - PLAN_PUBLISH_EVENT
        - When an plan is published from an provider to an API Portal then PLAN_PUBLISH_EVENT will be recorded for an audit purpose.

      - PLAN_REPUBLISH_EVENT
        - When an plan is re-published from an provider to an API Portal then PLAN_REPUBLISH_EVENT will be recorded for an audit purpose.
    ---
    ## Topic Level
      - TOPIC_CREATION_EVENT
        - When an topic is created at any asset level then TOPIC_CREATION_EVENT will be recorded for an audit purpose. This event will hold the asset type information too.

      - TOPIC_UPDATE_EVENT
        - When an existing topic is edited at any asset level then TOPIC_UPDATE_EVENT will be recorded for an audit purpose.

      - TOPIC_DELETION_EVENT
        - When an existing topic is deleted then TOPIC_DELETION_EVENT will be recorded for an audit purpose.

      - COLLABORATION_FLAG_EVENT
        - When an topic is flagged by a user then COLLABORATION_FLAG_EVENT will be recorded for an audit purpose.
    ---
    ## Comment Level
      - COMMENT_CREATION_EVENT
        - When an comment is created under an topic then COMMENT_CREATION_EVENT will be recorded for an audit purpose.

      - COMMENT_UPDATE_EVENT
        - When an existing comment is updated by user then COMMENT_UPDATE_EVENT will be recorded for an audit purpose.

      - COMMENT_DELETION_EVENT
        - When an existing comment is deleted by user then COMMENT_DELETION_EVENT will be recorded for an audit purpose.
    ---
    ## API Portal System Level
      - SIGN_UP_EVENT
        - When a user is signed-up to use the API Portal then SIGN_UP_EVENT will be recorded for an audit purpose.

      - CRON_EXECUTION_EVENT
        - When an internal regular interval system jobs are executed then CRON_EXECUTION_EVENT will be recorded for an audit purpose.

      - LIFE_CYCLE_STATE_CHANGE_EVENT
        - When an asset (API/Package) moved from current state to another target state then LIFE_CYCLE_STATE_CHANGE_EVENT will be recorder for an audit purpose.

      - FEATURE_CHANGE_EVENT
        - When Lifecycle management feature is enabled or disabled the FEATURE_CHANGE_EVENT will be recorded for an audit pupose.

    ---
    ## UMC Events
      - LOGIN_SUCCESSFUL
        - On sucessful login into the system LOGIN_SUCCESSFUL event will be recorded for audit purpose.
      - LOGIN_FAILED
        - On failed login into the system LOGIN_FAILED event will be recorded for audit purpose.
      - LOGOUT
        - On sucessful logout into the system LOGOUT event will be recorded for audit purpose.
      - LOGOUT_FORCED
        - When forced logout is executed LOGOUT_FORCED event will be recorded for audit purpose.
      - USER_CREATION
        - When a new user is created in the system USER_CREATION event will be recorded for audit purpose.
      - USER_UPDATE
        - When an existing user details is updated in the system USER_UPDATE event will be recorded for audit purpose.
      - USER_DELETION
        - When an user is deleted in the system USER_DELETION event will be recorded for audit purpose.
      - GROUP_CREATION
        - When a new group is created in the system GROUP_CREATION event will be recorded for audit purpose.
      - GROUP_UPDATE
        - When an existing group details is updated in the system GROUP_UPDATE event will be recorded for audit purpose.
      - GROUP_DELETION
        - When a group is deleted in the system GROUP_DELETION event will be recorded for audit purpose.
      - PASSWORD_CHANGE
        - When an user's password is changed PASSWORD_CHANGE event will be recorded for audit purpose.
      - PASSWORD_RESET
        - When an user's password is resetted by Administrator PASSWORD_RESET event will be recorded for audit purpose.
      - PRIVILEGE_ASSIGNMENT
        - When a privilege is assgined to an user PRIVILEGE_ASSIGNMENT event will be recorded for audit purpose.
      - PRIVILEGE_UNASSIGNMENT
        - When a privilege is unassgined from an user PRIVILEGE_UNASSIGNMENT event will be recorded for audit purpose.
      - USER_SETTING_ADDED
        - When new setting is added by an user USER_SETTING_ADDED event will be recorded for audit purpose.
      - USER_SETTING_REMOVED
        - When an existing setting is removed by an user USER_SETTING_REMOVED event will be recorded for audit purpose.

  version: '10.11'

servers:
  - url: http://localhost:18101/portal/rest/v1
    description: Development server

paths:
  /events:
    get:
      security:
        - basicAuth: [ ]
      operationId: getEvents
      summary: Retrieve the list of audit events
      description: Endpoint to retrieve the list of audit events. By default, this endpoint will return the Portal audit events that are created on the day of search. Search of events can be narrowed down based on the parameters
      parameters:
        - name: page
          in: query
          description: Optional parameter. Defines the page number to be retrieved for the collection. If not specified default value 0 is assumed. By default collection responses are paginated with batches of 10.
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: Optional parameter. Defines the number of results to be fetched for the current page. If not specified default value configured in system settings will be considered.
          required: false
          schema:
            type: integer
            default: 12
        - name: from
          in: query
          schema:
            type: string
            format: date
            example: '2020-03-21'
          description: Start date to filter the events. Events that are created on or after the mentioned date will be listed. If no date is mentioned start of today is assumed. The start date parameter supports only following format **'yyyy-mm-dd'** example **'2020-03-21'**.
        - name: to
          in: query
          schema:
            type: string
            format: date
            example: '2020-04-01'
          description: End date to filter the events. Events that are created before the end date (current time) will be listed. If no date is mentioned current date with time till 23:59 is considered. End date should be after Start date. The end date parameter supports only following format **'yyyy-mm-dd'** example **'2020-04-01'**.
        - name: type
          in: query
          schema:
            type: string
            description: Comma separated Audit event names. Varies depending on the selected system parameter.
            enum:
              - $ref: '#/components/schemas/CoreEvents'
              - $ref: '#/components/schemas/UmcEvents'
        - name: system
          in: query
          schema:
            type: string
            description: Type of Audit events to fetch (Portal or UMC events)
            default: CORE
            enum:
              - CORE
              - UMC
          description: |-
            Event type to filter the events. Events of the requested type will be listed.
            #### Sample Portal event types
            - API_PUBLISH_EVENT
            - GATEWAY_APPLICATION_CREATION_REQUEST_EVENT
            - COMMUNITY_DELETION_EVENT
            - PLAN_PUBLISH_EVENT
            - TOPIC_UPDATE_EVENT
            - SIGN_UP_EVENT
            - etc....
            #### Sample UMC event types
            - LOGIN_SUCCESSFUL
            - USER_CREATION
            - GROUP_UPDATE
            - etc....
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/EventsErrorResponse'
      tags:
        - Events
    delete:
      security:
        - basicAuth: [ ]
      operationId: purgeEvents
      summary: Purge the audit events
      description: Endpoint to purge the audit events within the given time range
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date
            example: '2020-03-21'
          description: Start date to purge the events. Events that are created on or after the mentioned date will be purged. If no date is mentioned start of today is assumed. The start date parameter supports only following format **'yyyy-mm-dd'** example **'2020-03-21'**.
        - name: to
          in: query
          schema:
            type: string
            format: date
            example: '2020-04-01'
          description: End date to purge the events. Events that are created before the end date (current time) will be purged. If no date is mentioned current date with time till 23:59 is considered. End date should be after Start date. The end date parameter supports only following format **'yyyy-mm-dd'** example **'2020-04-01'**.
        - name: system
          in: query
          schema:
            type: string
            description: Type of Audit events to purge (Portal or UMC events)
            default: CORE
            enum:
              - CORE
              - UMC
      responses:
        '204':
          description: Purging of audit events was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      tags:
        - Events

  /events/transactions:
    post:
      security:
        - basicAuth: [ ]
      summary: Store transactional events
      description: Store events received from third party providers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionalEvents'
            examples:
              TransactionalEvent:
                $ref: '#/components/examples/TransactionalEvents'

      responses:
        202:
          description: Accepted
        500:
          description: Internal Error

  /events/{id}:
    get:
      security:
        - basicAuth: [ ]
      summary: Get audit event by id
      parameters:
        - name: id
          in: path
          description: Unique identification of Audit event. Refers to the GUID of the event.For example `d4a6bc0b-24dd-4035-862a-0f8f7608512e`
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/AuditResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Not found

components:
  schemas:
    CoreEvents:
      title: List of Portal audit events
      description: Different kind of events are recorded by the API Portal. User could use any one this to query that particular type of event
      type: string
      example: API_PUBLISH_EVENT
      enum:
        - API_PUBLISH_EVENT
        - API_REPUBLISH_EVENT
        - API_UN_PUBLISH_EVENT
        - API_TRY_EVENT
        - GATEWAY_APPLICATION_CREATION_REQUEST_EVENT
        - GATEWAY_APPLICATION_SCOPE_INCREASE_REQUEST_EVENT
        - GATEWAY_APPLICATION_SCOPE_DECREASE_REQUEST_EVENT
        - GATEWAY_APPLICATION_UPDATION_REQUEST_EVENT
        - APPLICATION_REQUEST_PENDING_EVENT
        - APPLICATION_REQUEST_APPROVED_EVENT
        - APPLICATION_REQUEST_REJECTED_EVENT
        - APPLICATION_GRANTED_EVENT
        - APPLICATION_REVOKED_EVENT
        - APPLICATION_PUBLISH_EVENT
        - APPLICATION_SCOPE_CHANGE_EVENT
        - APPLICATION_UNPUBLISH_EVENT
        - COMMUNITY_CREATION_EVENT
        - COMMUNITY_DELETION_EVENT
        - COMMUNITY_MEMBERSHIP_CHANGE_EVENT
        - COMMUNITY_SCOPE_CHANGE_EVENT
        - PROVIDER_PUBLISH_EVENT
        - PROVIDER_REPUBLISH_EVENT
        - PROVIDER_UNPUBLISH_EVENT
        - PACKAGE_PUBLISH_EVENT
        - PACKAGE_REPUBLISH_EVENT
        - PACKAGE_UNPUBLISH_EVENT
        - PLAN_PUBLISH_EVENT
        - PLAN_REPUBLISH_EVENT
        - TOPIC_CREATION_EVENT
        - TOPIC_UPDATE_EVENT
        - TOPIC_DELETION_EVENT
        - COLLABORATION_FLAG_EVENT
        - COMMENT_CREATION_EVENT
        - COMMENT_UPDATE_EVENT
        - COMMENT_DELETION_EVENT
        - SIGN_UP_EVENT
        - CRON_EXECUTION_EVENT
        - LIFE_CYCLE_STATE_CHANGE_EVENT
        - FEATURE_CHANGE_EVENT
    UmcEvents:
      type: string
      description: List of UMC audit events
      enum:
        - LOGIN_SUCCESSFUL
        - LOGIN_FAILED
        - LOGOUT
        - LOGOUT_FORCED
        - USER_CREATION
        - USER_UPDATE
        - USER_DELETION
        - GROUP_CREATION
        - GROUP_UPDATE
        - GROUP_DELETION
        - PASSWORD_CHANGE
        - PASSWORD_RESET
        - PRIVILEGE_ASSIGNMENT
        - PRIVILEGE_UNASSIGNMENT
        - USER_SETTING_ADDED
        - USER_SETTING_REMOVED
    APIPortalErrorResponse:
      type: object
      properties:
        code:
          description: API Portal error code
          type: integer
        message:
          description: API Portal error response message
          type: string
    EventsErrorResponse:
      type: object
      properties:
        code:
          description: API Portal error code
          type: integer
        message:
          description: API Portal error response message
          type: string
        errors:
          description: Specific error message
          type: string
    SearchResponse:
      type: object
      properties:
        result:
          description: List of audit event records
          type: array
          items:
            $ref: '#/components/schemas/AuditEventRepositoryObject'
        count:
          description: Number of audit events matches for request query
          type: integer
        _links:
          description: List of available pagination links
          type: object
          additionalProperties:
            type: string

    AuditEventRepositoryObject:
      allOf:
        - $ref: '#/components/schemas/RepositoryObject'
      type: object
      properties:
        parameters:
          description: Event meta data
          type: object
          additionalProperties:
            type: object
          example:
            api_name: AccuWeather
        type:
          description: Type of the event
          type: object
          enum:
            - $ref: '#/components/schemas/EventType'
    RepositoryObject:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        summary:
          type: string
        description:
          type: string
        owner:
          type: string
        modified:
          type: string
          format: 'yyyy-MM-dd HH:mm'
        created:
          type: string
          format: 'yyyy-MM-dd HH:mm'
    TransactionalEvents:
      type: object
      properties:
        request:
          type: string
          description: Request made during the transaction
        nativeHttpMethod:
          type: string
          description: Http method invoked
        apiName:
          type: string
          description: Name of the API tried
        responseCode:
          type: string
          description: Response code of the transaction
        apiVersion:
          type: string
          description: Version of the API
        providerTime:
          type: string
          description: Time taken by the provider
        apiId:
          type: string
          description: Id of the API invoked
        applicationName:
          type: string
          description: Name of the application
        applicationIp:
          type: string
          description: Ip address of the application
        consumerId:
          type: string
          description: Id of the consumer
        totalTime:
          type: string
          description: Total time taken for the transaction
        operationName:
          type: string
          description: Name of the operation invoked in the transaction
        totalSize:
          type: string
          description: Total size of the response
        response:
          type: string
          description: Actual response of the given transaction
        applicationId:
          type: string
          description: Id of the application
        consumerName:
          type: string
          description: Name of the consumer

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  responses:
    EventsErrorResponse:
      description: Error occurred while retrieving the audit event
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventsErrorResponse'
          examples:
            400:
              $ref: '#/components/examples/EventsErrorResponse'
    Forbidden:
      description: User does not have sufficient privilages to perform this operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIPortalErrorResponse'
          examples:
            403:
              $ref: '#/components/examples/APIPortalErrorResponseForbidden'
    Unauthorized:
      description: There is no such user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIPortalErrorResponse'
          examples:
            401:
              $ref: '#/components/examples/APIPortalErrorResponseUnauthorized'
    SearchResponse:
      description: Successfully retrieved the events in API Portal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchResponse'
          examples:
            PortalAuditSearchResponse:
              $ref: '#/components/examples/PortalAuditSearchResponse'
            UmcAuditSearchResponse:
              $ref: '#/components/examples/UmcAuditSearchResponse'
    AuditResponse:
      description: Successfully retrieved the audit event with the given id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuditEventRepositoryObject'
          examples:
            AuditResponse:
              $ref: '#/components/examples/AuditResponse'

  examples:
    EventsErrorResponse:
      value:
        code: 400
        message: "User provided data is not correct"
        errors: [
            "Future date is not allowed in the 'to' parameter"
        ]
    APIPortalErrorResponseUnauthorized:
      value:
        code: 401
        message: Invalid credentials
    APIPortalErrorResponseForbidden:
      value:
        code: 403
        message: Insufficient privileges
    AuditResponse:
      value:
        id: bfe798fc-71e0-4300-8b74-d86524565a64
        parameters:
          provider_id: 677e11aa-3ce0-45e4-9590-731c61fcd402
          source: ProviderManager
          provider_name: Provider1
          created_by: 54b53072-540e-3eb8-b8e9-343e71f28176
        type: PROVIDER_PUBLISH_EVENT
    PortalAuditSearchResponse:
      value:
        result:
          - id: bfe798fc-71e0-4300-8b74-d86524565a64
            parameters:
              provider_id: 677e11aa-3ce0-45e4-9590-731c61fcd402
              source: ProviderManager
              provider_name: Provider1
              created_by: 54b53072-540e-3eb8-b8e9-343e71f28176
            type: PROVIDER_PUBLISH_EVENT
        count: 1
        _links:
          _self: /portal/rest/v1/events?from=2021-09-16&to=2021-09-20&page=0
    UmcAuditSearchResponse:
      value:
        result:
          - type: USER_UPDATE
            created: 2021-09-20T06:46+0000
            modified: 2021-09-20T06:46+0000
            parameters:
              field: LAST_NAME
              executor: administrator
              clientIp: null
              sessionType: UMC
              sessionId: 8c2eb45cc11857206b52b470b5e5e023
              userName: testuser
              userId: f7478165-755c-362c-b8ac-92119fabf588
              value: lastnamemodified
              nodeId: null
        count: 1
        _links:
          _self: /portal/rest/v1/events?from=2021-09-16&to=2021-09-20&system=UMC&page=0
    TransactionalEvents:
      value:
        request: null
        nativeHttpMethod: get
        apiName: quotes
        responseCode: 200
        apiVersion: 1.0
        providerTime: 4711
        apiId: 80102551-e7da-11ea-79ab-026fa4f0ed6c
        applicationName: Sample
        applicationIp: 127.0.0.1
        consumerId: 567f89cb-8182-3272-b69e-5d8532eb3ac5
        totalTime: 6264
        operationName: /api/v1/quotes/{quoteNumber}
        totalSize: 4663
        response: Some String response
        applicationId: d0580b41-4167-11eb-0217-0672e01da194
        consumerName: john.doe@sample.com

